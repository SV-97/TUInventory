#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex8
\index_command default
\float_placement H
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\rightmargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
rmdefault}{phv} % Arial
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
sfdefault}{phv} % Arial
\end_layout

\end_inset


\end_layout

\begin_layout Title
TUI - Test- und Integrationssystem für SCADA-Software
\end_layout

\begin_layout Author
von Stefan Volz & Yannis Köhler
\end_layout

\begin_layout Standard
\begin_inset VSpace 40pheight%
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Bilder/Logo.png
	scale 60

\end_inset


\begin_inset space \quad{}
\end_inset


\begin_inset Graphics
	filename Bilder/TUI_Logo.png
	scale 70

\end_inset


\begin_inset space \quad{}
\end_inset


\begin_inset Graphics
	filename Bilder/Schullogo.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Abkürzungsverzeichnis
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abk.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Digital Input
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Digital Output
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HMAC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Keyed-Hash Message Authentication Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IPC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Industrie-PC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
KW
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kalenderwoche
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CV
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Computer Vision
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OAEP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Optimal Asymmetric Encryption Padding
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PBKDF2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Password-Based Key Derivation Function 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PEP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Python Enhancement Proposal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PKCS #1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Public-Key Cryptography Standards First Family
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SCADA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supervisory Control and Data Acquisition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SHA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Secure Hash Algorithm
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SV
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stefan Volz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yannis Köhler
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Einführung
\end_layout

\begin_layout Section
Die Firma Padcon
\end_layout

\begin_layout Standard
Die Firma Padcon GmbH, ein Tochterunternehmen von INNOGY, ist ein weltweit
 agierendes IT-Unternehmen mit Sitz in Kitzingen.
 Zu ihren Produkten gehören SCADA-Systeme zur Überwachung von Groß-Photovoltaika
nlagen.
 Besonders nennenswert ist der „Pavagada Solar Park“ in Indien, welcher,
 nach Bauabschluss, mit knapp 2GW die aktuell größte Photovoltaikanlage
 der Welt darstellt.
\end_layout

\begin_layout Section
Aufgabenstellung
\end_layout

\begin_layout Standard
Für die Firma Padcon GmbH soll ein Test- und Integrationssystem erstellt
 werden.
 Dies umfasst die Dimensionierung und Installation von vier sogenannten
 Testplätzen in einem dafür vorgesehenen Raum.
 Hierfür muss auch eine neue Unterverteilung gebaut werden.
 An den Testplätzen wird man verschiedene Hardware wie IPC‘s, Router, Switches,
 etc.
 testen können.
 Ebenfalls sollen neue Versionen der firmeneigenen SCADA-Software, welche
 die Photovoltaik-Anlagen überwacht und Daten ausliest/aufzeichnet, getestet
 werden können, bevor diese an den Kunden ausgeliefert werden.
 Desweiteren soll eine Inventarsoftware erstellt werden, welche ein Einscannen
 von Barcodes ermöglicht und somit eine schnelle Zuordnung von Geräten zu
 Testplatz und zugehörigem Verantwortlichen zulässt.
 [sv]
\end_layout

\begin_layout Part
Test und Integrationsraum
\end_layout

\begin_layout Standard
avbasdasdasd
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
TUInventory
\end_layout

\begin_layout Section
Python 3
\end_layout

\begin_layout Subsection
Begriffsdefinitionen
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Begriff
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Definition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Immutabel / immutable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unveränderbar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kontext Manager / Context Manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Klasse, die __enter__ und __exit__ implementiert.
 Erlaubt es Objekte auch im Fehlerfall sauber zu schließen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lazy evaluation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Die Auswertung eines Ausdrucks erfolgt nur soweit sie gerade nötig ist.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Magic Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Eine i.d.R.
 implizit aufgerufene Methode, welche einer Klasse besondere Fähigkeiten
 gibt
\begin_inset CommandInset citation
LatexCommand cite
key "Python3"
literal "true"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mutabel / mutable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Veränderbar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mutex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gegenseitig ausschließend (von engl.
 mutual exclusion)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pythonic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
idiomatisch im Bezug auf Python
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Salt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Zufällige Zeichenfolge die in der Kryptografie u.A.
 bei Hash-Funktionen eingesetzt wird um die Entropie der Eingabe zu erhöhen.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
https://rszalski.github.io/magicmethods/ - __init__ ist nicht alleiniger Konstrukt
or, es wird auch immer erst __new__ aufgerufen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eine Besonderheit Pythons ist, dass alles, sei es Klasse, Instanz oder Funktion,
 ein Objekt ist.
 Dies bringt eine extreme Flexibilität mit sich.
\end_layout

\begin_layout Standard
Die Definitionen der Begriffe 
\emph on
Funktion
\emph default
 und 
\emph on
Methode
\emph default
 sind in Python anders als man es eventuell aus anderen Programmiersprachen
 kennt, daher seien sie hier kurz erläutert:
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
kein decorator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@classmethod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@staticmethod
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Klasse
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bound method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
function
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instanz
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bound method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bound method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
function
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Neben den 
\emph on
bound methods 
\emph default
gab es außerdem noch die sogenannten 
\emph on
unbound methods
\emph default
, die einer methode entsprechen welche ursprünglich zu einer Klasse gehört
 hat und somit eine Instanz dieser als ersten Parameter erwartet
\begin_inset CommandInset citation
LatexCommand cite
key "PythonDocDescriptorGuide"
literal "true"

\end_inset

.
 Jedoch wurde dieses Konzept mit Python 3.0 verworfen; was früher eine 
\emph on
unbound method
\emph default
 war ist nun ebenfalls eine 
\emph on
function
\begin_inset CommandInset citation
LatexCommand cite
key "PythonDocWhatsNewPython3"
literal "true"

\end_inset

.

\emph default
 Neben Methoden und Funktionen ist auch auch möglich andere Objekte in Python
 aufrufbar zu machen, hierzu müssen sie die magic method 
\emph on
__call__
\emph default
 implementieren.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Beispielprogramme/Funktionstypen.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Die verschiedenen Funktionstypen
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Beziehungen herstellen in SQLAlchemy
\end_layout

\begin_layout Subsection
Grundprinzip
\end_layout

\begin_layout Standard
In SQLAlchemy werden Beziehungen zwischen Tables mittels der 
\emph on
relationship
\emph default
 Methode hergestellt.
 Die Variante für die wir uns entschieden haben nutzt hierbei 
\emph on
backref
\emph default
:
\end_layout

\begin_layout Standard

\end_layout

\begin_layout LyX-Code
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Beispielprogramme/1-zu-n.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beispiel einer 1-zu-n Beziehung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es wird also in einer Klasse lediglich ein Fremdschlüssel festgelegt.
 In der anderen Klasse wird das 
\emph on
relationship
\emph default
 gesetzt.
 Dieses 
\emph on
relationship
\emph default
 stellt hierbei bei jeder Instanz von 
\emph on
Parent
\emph default
 eine Liste aller 
\emph on
Children
\emph default
-Instanzen zur Verfügung.
 Umgekehrt legt 
\emph on
backref
\emph default
 bei 
\emph on
Children
\emph default
 den Member 
\emph on
parent
\emph default
 an welcher auf die zugehörige Parent-Instanz verweist.
 Hier gilt zu beachten, dass es egal ist auf welcher Seite der Beziehung
 der Fremdschlüssel hinterlegt ist.
\end_layout

\begin_layout Standard
Erwähnenswert ist außerdem, dass das erste Argument von 
\emph on
relationship
\emph default
 nicht die Klasse 
\emph on
Child
\emph default
, sondern ein String, der ihren Namen enthält, ist.
 Dies ermöglicht es Beziehungen anzulegen, ohne das die Partnerklasse bereits
 angelegt wurde bzw.
 bekannt ist, was das Arbeiten wesentlich komfortabler macht.
\end_layout

\begin_layout Subsection
1-zu-1 Beziehung
\end_layout

\begin_layout Standard
Es lassen sich mit SQLAlchemy jedoch nicht nur 1-zu-n Beziehungen anlegen.
 Durch Erweiterung der 
\emph on
relationship
\emph default
-Methode mit dem 
\emph on
uselist
\emph default
 Parameter auf folgende Weise lässt sich an beiden Seiten des relationships
 eine Einzelinstanz hinterlegen.
\end_layout

\begin_layout LyX-Code
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Beispielprogramme/1-zu-1.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beispiel einer 1-zu-1 Beziehung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Implementierung
\end_layout

\begin_layout Section
Benutzerverwaltung
\end_layout

\begin_layout Standard
Da es in der Anwendung unter Anderem darum geht, festzulegen wer für welche
 Geräte verantwortlich ist, haben wir die Entscheidung getroffen, dass es
 nicht möglich sein sollte die Verantwortlichkeiten eines anderen Mitarbeiters
 bearbeiten zu können.
 Dies erfordert ein Nutzersystem mit entsprechender Nutzerverwaltung.
 Aufgrund dieser Nutzerverwaltung wurden wir mit dem Problem konfrontiert,
 dass die Benutzer sich authentifizieren können müssen, hierfür wurde, klassisch
erweise, ein Passwort-System gewählt.
 Dies bringt das Problem der Passwortspeicherung mit sich, das, auch heute
 noch, in vielen Systemen eine Schwachstelle für potentielle Angriffe Dritter
 darstellt.
 Während es sich bei diesem System nicht um eine wirklich Sicherheitskritische
 Anwendung handelt, sollte eine Anwendung unserer Ansicht nach dennoch so
 gestaltet sein, dass sie keine zu offensichtlichen Schwachstellen hat.
 Ein weiteres Problem entsteht dadurch, dass eine SQL-Datenbank im Hintergrund
 mit vom Nutzer zur Laufzeit eingegebenen Daten befüllt wird.
 Dies könnte, wenn nicht richtig abgefangen zur SQL-Injection genutzt werden.
 
\end_layout

\begin_layout Subsection
SQL
\end_layout

\begin_layout Standard
Das zweite Problem lässt sich mit Python vergleichsweise leicht umgehen
 indem man beim Nutzen von 
\emph on
sqlite3
\emph default
 die mitgelieferte ?-Syntax einsetzt, oder aber, wie wir das später näher
 erläuterte SQLAlchemy nutzt, welches intern eine Validierung der Werte
 durchführt, die es in seinen SQL-Befehlen nutzt.
\end_layout

\begin_layout Standard
Um das Problem/Prinzip der SQL-Injection aufzuzeigen folgt hier ein kurzes
 Beispiel.
\end_layout

\begin_layout Standard
Gegeben sei eine sehr einfache Datenbank die Nutzer mit Namen speichert:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename Beispielprogramme/SQL-Injection/DB.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Wobei es möglich sein soll neue Nutzer über eine Kommandozeileneingabe des
 Namens hinzuzufügen.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Beispielprogramme/SQL-Injection/SQL-Injection.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beispiel von SQL-Injection
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wird nun über die Kommandozeile als Name z.B.
 '""); DROP TABLE users;--' eingegeben wird die Tabelle aller Nutzer gelöscht.
 Korrekt umgesetzt ist das Ganze in 
\emph on
insert_user_secure
\emph default
 dargestellt, in diesem Fall wirft die selbe Eingabe einen Fehler und die
 Datenbank wird nicht 
\begin_inset Quotes eld
\end_inset

beschädigt
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Kryptografie
\end_layout

\begin_layout Standard
Für die Passwörter gestaltet sich das Ganze nicht ganz so unkompliziert.
 Aufgrund dessen dass der Quellcode offen ist und auch die Datenbank lokal
 liegt ist es einem Angreifer ein Leichtes jede eventuelle einfache Verschlüssel
ung zu umgehen.
 Daher werden bei unserer Lösung die Passwörter garnicht gespeichert - stattdess
en wird ein Hash-Algorithmus(zu Deutsch: Streuwertfunktion) eingesetzt und
 dieser Hash gespeichert.
 Ein Hash-Algorithmus ist eine Funktion welche, idealerweise, in eine Richtung
 sehr schnell durchzuführen ist; in die Andere dagegen einen sehr hohen
 Rechenaufwand benötigt.
 Im Idealfall ist dieser Rechenaufwand so hoch, dass sich eine 
\begin_inset Quotes eld
\end_inset

Einwegfunktion
\begin_inset Quotes erd
\end_inset

 ergibt, die nicht umzukehren ist.
 Ein klassisches Beispiel für einen simplen Hash-Algorithmus ist die einstellige
 Quersumme, hier wird rekursiv die Quersumme einer Zahl gebildet, bis nurnoch
 eine Stelle übrig ist.
\end_layout

\begin_layout Subsubsection
Benutzer Anlegen
\end_layout

\begin_layout Standard
Das genaue Verfahren ist im folgenden Diagramm ersichtlich, der zugehörige
 Quellcode ist in der Klasse 
\emph on
User 
\emph default
als Methode 
\emph on
hash
\emph default
 zu finden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Bilder/User-Anlegen-Prozess.png
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Passwort-Speicher-Vorgang
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es werden also aus den vom Nutzer getätigten Eingaben der Benutzername und
 das Passwort ausgewählt (bzw.
 werden diese in der Instanz einer Nutzerklasse abgelegt und daraus wieder
 abgerufen, dies wird allerdings später näher erläutert).
 Außerdem wird eine kryptografisch starke (im Gegensatz zu den, nicht für
 Kryptografieanwendungen geeigneten Zufallszahlen des normalen Pythonmoduls
 
\emph on
random
\emph default
) 256-Bit Zufallszahl generiert.
 Diese stellt ein erstes Salt dar.
 Im ersten Schritt wird nun die E-Mail-Adresse - ein String also - zu einer
 Abfolge aus Bytes codiert, welche dann als Ganzzahl interpretiert wird.
 Diese Zahl wird anschließend über ein logisches XOR mit dem generierten
 Salt verknüpft und stellt unser finales Salt dar.
 Die daraus resultierende Zahl, sowie das Passwort werden dann wieder zu
 einer Folge aus Bytes konvertiert.
 Im zweiten Schritt werden nun diese beiden 
\emph on
bytes
\emph default
-Instanzen über einen PBKDF2-Algorithmus miteinander verknüpft.
 In unserem Fall nutzt dieser intern einen HMAC-, welcher wiederum einen
 SHA-512-Algorithmus nutzt.
 Dieser Hash-Vorgang wird nun 9600-mal durchgeführt.
 Der daraus entstehende Hash ist unser 
\begin_inset Quotes eld
\end_inset

Endergebnis
\begin_inset Quotes erd
\end_inset

 und wird zusammen mit der Anfangs generierten Zufallszahl in der Datenbank
 abgelegt.
\end_layout

\begin_layout Standard
Der Hintergrund zu der vergleichsweise komplexen Erzeugung des finalen Salts
 ist Folgender:
\end_layout

\begin_layout Itemize
Wenn man kein Salt einsetzt haben zwei Nutzer in der Datenbank den selben
 Hash, wenn sie das selbe Passwort haben, was einem Angreifer im Bereich
 Social Engineering einen Angriffspunkt liefern würde (à la.: 
\begin_inset Quotes eld
\end_inset

Was haben diese Nutzer gemeinsam, dass sie eventuell als Passwort nutzen
 könnten
\begin_inset Quotes erd
\end_inset

), bzw.
 lässt auf ein gängiges Passwort schließen
\end_layout

\begin_layout Itemize
Wenn man nur die Zufallszahl als Salt nutzt ist es theoretisch möglich,
 dass zwei Nutzer die selbe Zufallszahl erhalten (Auch wenn diese Wahrscheinlich
keit praktisch vernachlässigbar klein ist, bei 
\begin_inset ERT
status open

\begin_layout Plain Layout

$2^{256}$
\end_layout

\end_inset

 Werten die die Zufallszahl annehmen kann und einer zu erwartenden Nutzerzahl
 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
leq$
\end_layout

\end_inset

 50) was im selben Problem wie der zuvor genannte Punkt münden würde
\end_layout

\begin_layout Itemize
Wenn man nur den Benutzernamen als Salt einsetzt läuft man Gefahr, dass
 ein Nutzer einen sehr kurzen Benutzernamen wählt, wodurch ein vergleichsweise
 schnelles Durchprobieren/Brute-Forcen durch alle Salts möglich ist
\end_layout

\begin_layout Itemize
Durch die XOR-Verknüpfung von Nutzername und Zufallszahl hat man somit ein
 für jeden Nutzer garantiert einzigartiges Salt.
 Ein Angreifer kann dadurch eine Bruteforce Attacke nur für einen einzigen
 Nutzer auf einmal ausführen
\end_layout

\begin_layout Subsubsection
Benutzer Anmelden
\end_layout

\begin_layout Standard
Beim Anmeldevorgang wird grundsätzlich der selbe Vorgang wie beim Erzeugen
 eines Nutzers durchgeführt, nur das hier aus der Datenbank abgefragt, anstatt
 gespeichert wird.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Bilder/User-Anmelden-Prozess.png
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Anmelde-Vorgang
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Nutzer gibt also wieder seine Daten ein.
 Anhand des Nutzernamens wird nun geprüft ob ein solcher Nutzer in der Datenbank
 vorhanden ist - wenn ja wird dieser ausgelesen.
 Nun wird mit dem ausgelesenen Salt analog zum Passwort-speicher-Vorgang
 ein Hash erzeugt.
 Stimmt dieser Hash mit dem des Nutzers aus der Datenbank überein wird der
 Benutzer eingeloggt.
\end_layout

\begin_layout Subsubsection
Benutzer hat sein Passwort vergessen
\end_layout

\begin_layout Standard
Wenn man ein System errichtet, bei dem ein Nutzer sich ein Passwort merken
 muss, ist die Wahrscheinlichkeit groß, dass er dieses vergisst.
 Daher gibt es einen Prozess um das Passwort eines Nutzers zurücksetzen
 zu können.
 Da die Anwendung grundsätzlich offline laufen können sollte (nicht zuletzt
 aus sicherheitstechnischen Aspekten) wurde hier nicht die Variante des
 Rücksetzens per E-Mail-Token gewählt - stattdessen gibt es einen (oder
 auch mehrere) Admin-User die dem Nutzer ein automatisch generiertes Passwort
 zuweisen können, sodass er sich Anmelden und selbst ein neues eingeben
 kann.
 Dieser Prozess lässt sich wie folgt visualisieren:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Bilder/User-PW-Reset.png
	scale 50

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Rücksetzen eines Benutzerpassworts
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es wird also zunächst, über eine Nutzereingabe, der gewünschte User aus
 der Datenbank ausgelesen.
 Parallel dazu wird aus einer vordefinierten Zeichenfolge eine Auswahl von
 15 Zeichen getroffen.
 Diese Stellen das neue Passwort dar und werden in der UI angezeigt.
 Bei der Zeichenfolge aus der das Passwort generiert wird, wurde darauf
 geachtet dass jedes Zeichen klar lesbar ist.
 So wurden 
\begin_inset Quotes eld
\end_inset

O
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

I
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

l
\begin_inset Quotes erd
\end_inset

 ausgenommen da diese nicht immer klar zu unterscheiden bzw.
 leicht zu verwechseln sind.
 Abseits davon besteht die Zeichenfolge aus dem ganzen Alphabet in Groß-
 und Kleinschreibung, den Ziffern und einigen Sonderzeichen - insgesamt
 stehen somit 77 Zeichen zur Verfügung.
 Hier kam die Frage auf ob es klüger wäre zu versuchen mehr Zeichen hinzuzufügen
, oder aber ein längeres Passwort zu wählen.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection
Mathematische Betrachtung der Passwort-Generation
\end_layout

\begin_layout Standard
Definiert man 
\emph on
n
\emph default
 als die Anzahl an verfügbaren Zeichen und 
\emph on
k
\emph default
 als Länge des Passwortes lässt sich die Anzahl an mögliche Passwörtern
 mit der Funktion 
\begin_inset ERT
status open

\begin_layout Plain Layout

$$f(n,k) := n^k$$
\end_layout

\end_inset

 darstellen.
 Möchte man nun wissen ob es effizienter ist weitere Zeichen hinzuzufügen
 oder das Passwort zu verlängern kann man dies über eine Betrachtung der
 beiden Differentiale
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$$f_1(n,k) := 
\backslash
frac {
\backslash
partial f}{
\backslash
partial n} = k 
\backslash
cdot n^{k-1}$$
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
und 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

$$f_2(n,k) := 
\backslash
frac {
\backslash
partial f}{
\backslash
partial k} = n^k 
\backslash
cdot ln(n)$$
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
herausfinden, welche die Änderungsraten von 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f(n,k)$
\end_layout

\end_inset

 bei Änderung eines der beiden Parametern darstellen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Bilder/Passwort-Varianten-Graph_1_cropped.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Vergleich von 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_1$
\end_layout

\end_inset

 und 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_2$
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Hier wurden die beiden Funktionen für die Werte 5, 10 und 15 für den Parameter
 welcher statisch gehalten wird (k bei 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_1$
\end_layout

\end_inset

 und n bei 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_2$
\end_layout

\end_inset

; dargestellt durch i), und einem Bereich von 0 bis 20 des dynamischen Parameter
s geplottet.
 Wie man sieht gibt es sowohl Bereiche in denen 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_1$
\end_layout

\end_inset

, wie auch welche in denen 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_2$
\end_layout

\end_inset

 effizienter(sprich größer) ist (siehe Schnittpunkte der Graphen).
 Daher sollte man eine allgemeinere Darstellung wählen.
 Verallgemeinert, sodass kein Parameter statisch gehalten wird lässt sich
 die Funktion folgenderweise darstellen:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Bilder/Passwort-Varianten-Graph_2_cropped.png
	scale 75

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Heatmap aus 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_1$
\end_layout

\end_inset

 und 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_2$
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wenn man eine neue Funktion 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_3(f_1, f_2)$
\end_layout

\end_inset

 als 
\begin_inset ERT
status open

\begin_layout Plain Layout

$$f_3(n, k) := f_1 - f_2 = 
\backslash
frac {
\backslash
partial f}{
\backslash
partial n} - 
\backslash
frac {
\backslash
partial f}{
\backslash
partial k} = k 
\backslash
cdot n^{k-1} - n^k 
\backslash
cdot ln(n)$$
\end_layout

\end_inset

 definiert, und bei dieser alle Werte > 0 in schwarz, die Anderen in weiß
 darstellt, so hat man eine Karte die angibt ob bei einer bestimmten Koordinate
 die Erhöhung von k oder n die effizientere Wahl ist um das generierte Passwort
 sicherer zu machen.
 Die Grenze zwischen den weißen und schwarzen Bereichen stellt die Nullstellen
 von 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_3$
\end_layout

\end_inset

 dar.
 Setzt mal also 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_3 = 0$
\end_layout

\end_inset

 und löst dieses beispielsweise nach k auf ergibt sich 
\begin_inset ERT
status open

\begin_layout Plain Layout

$$k(n) = n 
\backslash
cdot ln(n),$$
\end_layout

\end_inset

 was ein einfacheres Überprüfen der Koordinaten zulässt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Bilder/Passwort-Varianten-Graph_3_cropped.png
	scale 40
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

$k(n)$
\end_layout

\end_inset

 aus 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_3$
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Hier gilt, dass bei einem Punkt unterhalb der Kurve der Wert von 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_3$
\end_layout

\end_inset

 positiv ist, wohingegen er unterhalb negativ ist.
 Daraus folgt, dass oberhalb der Kurve 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f_1$
\end_layout

\end_inset

 überwiegt, also die Rate der Änderung von k größer der von n ist.
\end_layout

\begin_layout Standard
Basierend auf diesen Daten bzw.
 Feststellungen wurde also der Zeichensatz um einige Zeichen erweitert.
 Es stehen nun 84 anstatt 77 Zeichen zur Verfügung, also 7 Zeichen mehr.
 Diese 7 Zeichen mehr geben bei gleicher Passwortlänge von 15 Zeichen 
\begin_inset ERT
status open

\begin_layout Plain Layout

$84^15-77^15 
\backslash
approx 7,31 
\backslash
cdot 10^28 - 1.98 
\backslash
cdot 10^28 = 5.33 
\backslash
cdot 10^28$
\end_layout

\end_inset

 mehr Möglichkeiten.
 Oder anders ausgedrückt ist die Sicherheit des Passworts um den Faktor
 3,69 erhöht worden.
\end_layout

\begin_layout Standard
Im Retrospekt ist zu erkennen, dass hierbei eine Funktion für die Schnittpunkte
 der beiden partiellen Differentiale gebildet wurde.
\end_layout

\begin_layout Subsubsection
Admin hat sein Passwort vergessen
\end_layout

\begin_layout Standard
Jedoch kann es natürlich auch vorkommen, dass ein Admin sein Passwort vergisst
 - auch für so einen Fall steht ein Prozess zur Verfügung.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Bilder/Admin-PW-Reset.png
	scale 50
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Verifizierung zum Rücksetzen eines Admin-Passworts 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wenn ein Admin sein Passwort zurücksetzen möchte, so erfordert dies eine
 weitere Sicherheitsstufe.
 Diese wird über eine asymmetrische Verschlüsselung mittels RSA, bzw.
 PKCS #1-OAEP realisiert.
 Das Verfahren läuft dabei wie folgt ab:
\end_layout

\begin_layout Itemize
Lokal ist ein Public-Key hinterlegt
\end_layout

\begin_layout Itemize
Mit diesem wird ein arbiträrer Wert (In der Implementierung ist 
\begin_inset Quotes eld
\end_inset

True
\begin_inset Quotes erd
\end_inset

 gewählt) verschlüsselt
\end_layout

\begin_layout Itemize
Anschließend wird probiert dieser Wert mit einem vom Nutzer gegebenen Schlüssel
 zu entschlüsseln
\end_layout

\begin_layout Itemize
Ist dies erfolgreich, wird ein neues Schlüsselpaar erzeugt und sowohl Public-
 wie auch Private-Key überschrieben - dies hat zur Folge, dass jedes Schlüsselpa
ar nur einmal gültig ist - so können andere Admins kontrollieren ob ein
 Admin kürzlich sein Passwort zurückgesetzt hat
\end_layout

\begin_layout Itemize
Ab hier wird der normale Passwort-Rücksetz-Vorgang eines Users eingeleitet
\end_layout

\begin_layout Standard
Es ist so vorgesehen, dass ein Admin (bzw.
 Superadmin - je nachdem wer Zugang zum Private-Key erhält) den Schlüssel
 auf einem USB-Stick o.Ä.
 ablegt und diesen im Bedarfsfall einsteckt.
\end_layout

\begin_layout Subsection
Automatisches Abmelden
\end_layout

\begin_layout Standard
Bei einem zenralen System, das mehreren Nutzern zugänglich ist, ist es wünschens
wert wenn ein Nutzer automatisch abgemeldet wird sobald er eine bestimmte
 Zeit untätig ist.
 Dies beugt Missbrauch vor.
 Hierzu wurde die Klasse 
\emph on
Timeout
\emph default
 geschrieben.
\end_layout

\begin_layout Standard

\emph on
Timeout
\emph default
 ermöglicht es einen Thread zu öffnen, welcher im Hintergrund mit einer
 bestimmten Abtastrate prüft ob die eingestellte Zeit bereits verstrichen
 ist.
 Da es mit dieser Funktionalität an sich nur ein Timer wäre, implementiert
 die Klasse weiterhin die Methode 
\emph on
reset
\emph default
 um den internen Timer immer dann zurückzusetzen, wenn ein bestimmtes Event
 aufgetreten ist.
 Jede 
\emph on
Timeout
\emph default
-Instanz erhält außerdem ein aufrufbares Objekt und eine Liste mit positionellen
 Argumenten.
 Beim timeout wird diese Methode mit den übergebenen Argumenten ausgeführt
 und das Attribut 
\emph on
timed_out
\emph default
 auf 
\emph on
True
\emph default
 gesetzt.
 Bei den Argumenten ist zu beachten, dass 
\emph on
args
\emph default
 standartmäßig auf None gesetzt wird, zur Laufzeit des Konstruktors allerdings
 mit einer leeren Liste ersetzt wird wenn dieser Standartwert vorhanden
 ist.
 Dies hat den Hintergrund, dass es generell eine schlechte Idee ist eine
 leere Liste als Standartwert festzulegen, Standartwerte nicht beim Aufrufen
 einer Methode (oder Funktion oder Sonstigem), sondern sobald das zugehörige
 
\emph on
def 
\emph default
ausgeführt wird evaluiert werden.
 Bei immutablen Datentypen ist dies kein Problem - bei mutablen allerdings
 wird so stets die selbe Instanz intern verwendet was dazu führt, dass eine
 Änderung der Daten in einem Funktionsaufruf, alle anderen mit beeinflusst.
\end_layout

\begin_layout Standard
Da die Klasse Timeout auf paralleler Programmierung basiert sind hier einige
 Besonderheiten zu beachten.
 So wird auf 
\emph on
timer
\emph default
 sowohl von außerhalb, über 
\emph on
reset
\emph default
, wie auch von innerhalb zugegriffen.
 Die Punkte an denen diese Zugriffe stattfinden bezeichnet man als 
\emph on
Critical Sections
\emph default
, hier kann es zu sog.
 
\emph on
Race Conditions
\emph default
 kommen
\begin_inset CommandInset citation
LatexCommand cite
key "Python3"
literal "true"

\end_inset

.
 Dies ist der Fall wenn ein Thread gerade auf die Variable zugreift(z.B.
 liest) und dann der andere Thread die Kontrolle erhält und die Variable
 überschreibt und führt dazu dass der lesende Thread einen falschen Wert
 erhält.
 Um dieses Problem vorzubeugen existiert die Klasse 
\emph on
Lock
\emph default
 des Moduls 
\emph on
threading.

\emph default
 Mithilfe dieser lassen sich Stellen, die nicht Parallel verarbeitet werden
 dürfen, abriegeln (vgl.
 Mutex).
 Dabei nimmt sich der Thread, welcher zuerst seine 
\emph on
Critical Section
\emph default
 erreicht den 
\emph on
lock
\emph default
, welcher als Kontextmanager fungiert(intern werden die Methoden lock.acquire
 und lock.release aufgerufen) und führt den Code im 
\emph on
with
\emph default
-Block aus.
 Der andere Thread kann hierbei weiterlaufen bis er seine 
\emph on
Critical Section
\emph default
 erreicht, erst dann wird er blockiert bis er selbst den 
\emph on
lock acquire
\emph default
'n kann.
 
\end_layout

\begin_layout Standard
Zur Parallelisierung wurde ein Thread einem Prozess gegenüber bevorzugt
 da der Overhead hier kleiner ist, es ist also weniger kostspielig einen
 neuen Thread zu öffnen.
 Außerdem ist der Datenaustausch zwischen Threads immens einfacher verglichen
 mit Prozessen, in unserem Fall können wir einfach ein Attribut der Klasse
 dafür benutzen.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
PyQt5
\end_layout

\begin_layout Subsection
Darstellen der Verantwortlichkeiten als Baumstruktur
\end_layout

\begin_layout Standard
Aufgrund von guter Übersichtlichkeit haben wir uns dazu entschieden die
 Verantwortlichkeiten als Baumstruktur darzustellen.
 PyQt5 stellt hierzu die Widgets QTreeView und QTreeWidget zur Verfügung,
 wobei QTreeView ein Model-View-Architektur- und QTreeWidget ein Item-basierende
s Widget ist.
 Die MV-Architektur die PyQt über einige, teils abstrakte, Klassen bietet,
 ist dabei eine Variante der generell bekannten Model-View-Controller-Architektu
r wobei der Controller mit dem View kombiniert wurde.
 Desweiteren wurde in PyQt der Delegate hinzugefügt, der managed, wie Daten
 im View gerendert werden und wie geänderte Daten der UI im Model abgelegt
 werden.
\end_layout

\begin_layout Standard
Da im Fall von TUInventory nicht gewünscht ist, dass Daten direkt im Baum
 geändert werden können und die Darstellung der Daten nur an dieser Stelle
 erfolgt musste aufgrund von Kosten-Nutzen Aspekten vorerst die Item-basierte
 Variante des 
\emph on
QTreeWidget
\emph default
 vorgezogen werden.
 Das befüllen dieses Widgets erfolgt in der Methode 
\emph on
set_tree
\emph default
 der Klasse 
\emph on
MainDialog
\emph default
.
\end_layout

\begin_layout Standard
Zu Beginn wird hier über den bereits erläuterten Session-Context-Manager
 eine neue Datenbank-Session geöffnet in der wir nun alle 
\emph on
Responsibilit
\emph default
ies abfragen können.
 Über diese wird nun iteriert, wobei in jeder Iteration für Ort, Benutzer
 und Gerät jeweils zuerst ein 
\emph on
QTreeWidgetItem
\emph default
 erzeugt wird.
 Dieses wird zum Einfügen in den Baum benötigt.
 Nun wird nach einem Siebprinzip nacheinander ermittelt ob sich der Ort,
 Benutzer und das Gerät bereits im Baum befinden.
 Hierbei wird zuerst überprüft ob sich im Wurzelverzeichnis 
\emph on
root
\emph default
 des Baums die 
\emph on
Location
\emph default
 der aktuellen 
\emph on
Responsibility
\emph default
 befindet, sofern dies nicht der Fall ist wird die Location mit all ihren
 untergeordneten Elementen eingefügt.
 Falls die 
\emph on
Location
\emph default
 bereits als sog.
 
\emph on
TopLevelItem
\emph default
 im Baum befindet wird überprüft ob unter dieser 
\emph on
Location
\emph default
 bereits der 
\emph on
User
\emph default
 der aktuellen 
\emph on
Responsibility
\emph default
 befindet, sofern dies nicht der Fall ist wird der 
\emph on
User
\emph default
 unter seiner 
\emph on
Location
\emph default
 einsortiert und bekommt das aktuelle 
\emph on
Device
\emph default
 als Unterelement zugewiesen.
 Sollte der 
\emph on
User
\emph default
 bereits vorhanden sein, wird analog zur 
\emph on
Location
\emph default
 weiterverfahren.
 Dieser Prozess ist im folgenden Struktogramm dargestellt:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Bilder/Responsibility-Baum-Sieb-Struktorgramm.png
	scale 75

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Struktogramm nach Nassi-Shneiderman zum Responsibility-Baum-Sieb 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In diesem Teil des Programms, werden oftmals Generator-Expressions und List-Comp
rehensions verwendet, daher sei im Folgenden kurz erläutert wann sich für
 welche entschieden wurde.
\end_layout

\begin_layout Standard
Der folgende Programmausschnitt zeigt einen Ausschnitt der interaktiven
 Konsole.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Beispielprogramme/Generator-Expression_vs_List-Comprehension.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Vergleich von Generator-Expressions und List-Comprehensions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zu Beginn wird hier die Funktion 
\emph on
getsizeof
\emph default
 der Standartlibrary 
\emph on
sys
\emph default
 importiert, die es erlaubt die Größe einer Instanz in Bytes zu ermitteln.
 Nun wird zunächst über eine List-Comprehension eine Liste mit den Zahlen
 0 bis 9 definiert.
 Anschließend werden die selben Zahlen mit einer Generator-Expression hinterlegt.
 
\end_layout

\begin_layout Standard
Vergleicht man hier die Größe der beiden Instanzen wird klar, dass die Generator
-Expression wesentlich kleiner ist.
 Führt man nun einen Typvergleich der Instanzen durch sieht man, dass es
 sich bei 
\emph on
a
\emph default
 um eine Liste und bei 
\emph on
b
\emph default
 um einen Generator handelt.
 Damit lässt sich auch einfach der geringere Speicher-Footprint erklären:
 bei einer List-Comprehension erfolgt die Auswertung sofort und somit liegt
 die ganze Liste im Speicher.
 Bei der Generator-Expression hingegen, wird erst zum Zeitpunkt der Auswertung
 die Methode 
\emph on
__next__
\emph default
 der zugrundeliegenden Generatorinstanz aufgerufen, welche dann intern mittels
 
\emph on
yield
\emph default
 den nächsten Wert ausgibt.
\end_layout

\begin_layout Standard
Jedoch kann man dennoch nicht immer Generatoren einsetzen, da diese einige
 entscheidenden Nachteile haben.
 So ist es nicht möglich, mittels Index auf die Elemente eines Generators
 zuzugreifen.
 Außerdem ist ein Generator nach einer 
\begin_inset Quotes eld
\end_inset

Benutzung
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

aufgebraucht
\begin_inset Quotes erd
\end_inset

.
 Dies kann man sehen, wenn man zweimal die Summen unserer beiden Instanzen
 addiert.
 Für die List-Comprehension wird hier korrekterweise 90 ausgegeben (
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
sum_{n=0}^{9} n = 45$
\end_layout

\end_inset

), für die Generator-Expression jedoch nur 45, da sie beim zweiten Aufruf
 0 zurückgibt.
 Hierzu sollte noch gesagt werden, dass wenn man einen Generator nicht über
 eine Generator-Expression, sondern manuell als Klasse/Funktion implementiert
 dies teilweise umgangen werden kann.
\end_layout

\begin_layout Standard
Mit diesem Wissen ist nun auch leicht erklärbar wann welche der Strukturen
 eingesetzt wurde:
\end_layout

\begin_layout Itemize
Generator-Expression immer wenn sichergestellt ist, dass die Instanz nur
 einmal iteriert werden muss
\end_layout

\begin_layout Itemize
List-Comprehension immer dann, wenn die Instanz mehrfach iteriert, oder
 
\begin_inset Quotes eld
\end_inset

abonniert
\begin_inset Quotes erd
\end_inset

(von engl.
 subscribe - also die [Index]-Notation) werden muss
\end_layout

\begin_layout Subsection
Fazit
\end_layout

\begin_layout Standard
Es kann gesagt werden, dass PyQt(5) gegenüber anderen GUI-Paketen, wie z.B.
 tkinter aus der Python Standartbibliothek, klare Vorzüge hat.
 So ist der Code plattformunabhängig, die Bedienelemente sehen ansprechend
 aus und es ist einfach, auch größere Anwendungen noch gut zu strukturieren.
 Jedoch muss auch gesagt werden, dass PyQt5 teils nicht wirklich 
\begin_inset Quotes eld
\end_inset

pythonic
\begin_inset Quotes erd
\end_inset

 ist; so werden z.B.
 die Texte vieler Bedienelemente nicht über eine 
\emph on
property
\emph default
/Zuweisung sondern über eine setText-Methode geändert.
 Da Qt eigentlich aus dem C++ Bereich kommt ist dies verständlich, hätte
 im Wrapper jedoch geändert werden sollen.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "Literaturverzeichnis"
options "alphadin"

\end_inset


\end_layout

\end_body
\end_document
