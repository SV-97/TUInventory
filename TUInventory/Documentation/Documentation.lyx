#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex8
\index_command default
\float_placement H
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\rightmargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
rmdefault}{phv} % Arial
\end_layout

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
sfdefault}{phv} % Arial
\end_layout

\end_inset


\end_layout

\begin_layout Title
TUI - Test- und Integrationssystem für SCADA-Software
\end_layout

\begin_layout Author
von Stefan Volz & Yannis Köhler
\end_layout

\begin_layout Standard
\begin_inset VSpace 40pheight%
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Bilder/Logo.png
	scale 60

\end_inset


\begin_inset space \quad{}
\end_inset


\begin_inset Graphics
	filename Bilder/TUI_Logo.png
	scale 70

\end_inset


\begin_inset space \quad{}
\end_inset


\begin_inset Graphics
	filename Bilder/Schullogo.png
	scale 25

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Abkürzungsverzeichnis
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abk.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Digital Input
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Digital Output
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IPC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Industrie-PC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
KW
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kalenderwoche
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CV
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Computer Vision
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PBKDF2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Password-Based Key Derivation Function 2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PEP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Python Enhancement Proposal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SCADA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supervisory Control and Data Acquisition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SV
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stefan Volz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yannis Köhler
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Einführung
\end_layout

\begin_layout Section
Die Firma Padcon
\end_layout

\begin_layout Standard
Die Firma Padcon GmbH, ein Tochterunternehmen von INNOGY, ist ein weltweit
 agierendes IT-Unternehmen mit Sitz in Kitzingen.
 Zu ihren Produkten gehören SCADA-Systeme zur Überwachung von Groß-Photovoltaika
nlagen.
 Besonders nennenswert ist der „Pavagada Solar Park“ in Indien, welcher,
 nach Bauabschluss, mit knapp 2GW die aktuell größte Photovoltaikanlage
 der Welt darstellt.
\end_layout

\begin_layout Section
Aufgabenstellung
\end_layout

\begin_layout Standard
Für die Firma Padcon GmbH soll ein Test- und Integrationssystem erstellt
 werden.
 Dies umfasst die Dimensionierung und Installation von vier sogenannten
 Testplätzen in einem dafür vorgesehenen Raum.
 Hierfür muss auch eine neue Unterverteilung gebaut werden.
 An den Testplätzen wird man verschiedene Hardware wie IPC‘s, Router, Switches,
 etc.
 testen können.
 Ebenfalls sollen neue Versionen der firmeneigenen SCADA-Software, welche
 die Photovoltaik-Anlagen überwacht und Daten ausliest/aufzeichnet, getestet
 werden können, bevor diese an den Kunden ausgeliefert werden.
 Desweiteren soll eine Inventarsoftware erstellt werden, welche ein Einscannen
 von Barcodes ermöglicht und somit eine schnelle Zuordnung von Geräten zu
 Testplatz und zugehörigem Verantwortlichen zulässt.
 [sv]
\end_layout

\begin_layout Part
Test und Integrationsraum
\end_layout

\begin_layout Standard
avbasdasdasd
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
TUInventory
\end_layout

\begin_layout Section
Python 3
\end_layout

\begin_layout Subsection
Begriffsdefinitionen
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Begriff
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Definition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Immutabel / immutable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unveränderbar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kontext Manager / Context Manager
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Klasse, die __enter__ und __exit__ implementiert.
 Erlaubt es Objekte auch im Fehlerfall sauber zu schließen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lazy evaluation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Die Auswertung eines Ausdrucks erfolgt nur soweit sie gerade nötig ist.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Magic Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Eine i.d.R.
 implizit aufgerufene Methode, welche einer Klasse besondere Fähigkeiten
 gibt
\begin_inset CommandInset citation
LatexCommand cite
key "Python3"
literal "true"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mutabel / mutable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Veränderbar
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mutex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gegenseitig ausschließend (von engl.
 mutual exclusion)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
https://rszalski.github.io/magicmethods/ - __init__ ist nicht alleiniger Konstrukt
or, es wird auch immer erst __new__ aufgerufen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eine Besonderheit Pythons ist, dass alles, sei es Klasse, Instanz oder Funktion,
 ein Objekt ist.
 Dies bringt eine extreme Flexibilität mit sich.
\end_layout

\begin_layout Standard
Die Definitionen der Begriffe 
\emph on
Funktion
\emph default
 und 
\emph on
Methode
\emph default
 sind in Python anders als man es eventuell aus anderen Programmiersprachen
 kennt, daher seien sie hier kurz erläutert:
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
kein decorator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@classmethod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
@staticmethod
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Klasse
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bound method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
function
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instanz
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bound method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bound method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
function
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Neben den 
\emph on
bound methods 
\emph default
gab es außerdem noch die sogenannten 
\emph on
unbound methods
\emph default
, die einer methode entsprechen welche ursprünglich zu einer Klasse gehört
 hat und somit eine Instanz dieser als ersten Parameter erwartet
\begin_inset CommandInset citation
LatexCommand cite
key "PythonDocDescriptorGuide"
literal "true"

\end_inset

.
 Jedoch wurde dieses Konzept mit Python 3.0 verworfen; was früher eine 
\emph on
unbound method
\emph default
 war ist nun ebenfalls eine 
\emph on
function
\begin_inset CommandInset citation
LatexCommand cite
key "PythonDocWhatsNewPython3"
literal "true"

\end_inset

.

\emph default
 Neben Methoden und Funktionen ist auch auch möglich andere Objekte in Python
 aufrufbar zu machen, hierzu müssen sie die magic method 
\emph on
__call__
\emph default
 implementieren.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Beispielprogramme/Funktionstypen.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Die verschiedenen Funktionstypen
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Beziehungen herstellen in SQLAlchemy
\end_layout

\begin_layout Subsection
Grundprinzip
\end_layout

\begin_layout Standard
In SQLAlchemy werden Beziehungen zwischen Tables mittels der 
\emph on
relationship
\emph default
 Methode hergestellt.
 Die Variante für die wir uns entschieden haben nutzt hierbei 
\emph on
backref
\emph default
:
\end_layout

\begin_layout Standard

\end_layout

\begin_layout LyX-Code
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Beispielprogramme/1-zu-n.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beispiel einer 1-zu-n Beziehung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es wird also in einer Klasse lediglich ein Fremdschlüssel festgelegt.
 In der anderen Klasse wird das 
\emph on
relationship
\emph default
 gesetzt.
 Dieses 
\emph on
relationship
\emph default
 stellt hierbei bei jeder Instanz von 
\emph on
Parent
\emph default
 eine Liste aller 
\emph on
Children
\emph default
-Instanzen zur Verfügung.
 Umgekehrt legt 
\emph on
backref
\emph default
 bei 
\emph on
Children
\emph default
 den Member 
\emph on
parent
\emph default
 an welcher auf die zugehörige Parent-Instanz verweist.
 Hier gilt zu beachten, dass es egal ist auf welcher Seite der Beziehung
 der Fremdschlüssel hinterlegt ist.
\end_layout

\begin_layout Standard
Erwähnenswert ist außerdem, dass das erste Argument von 
\emph on
relationship
\emph default
 nicht die Klasse 
\emph on
Child
\emph default
, sondern ein String, der ihren Namen enthält, ist.
 Dies ermöglicht es Beziehungen anzulegen, ohne das die Partnerklasse bereits
 angelegt wurde bzw.
 bekannt ist, was das Arbeiten wesentlich komfortabler macht.
\end_layout

\begin_layout Subsection
1-zu-1 Beziehung
\end_layout

\begin_layout Standard
Es lassen sich mit SQLAlchemy jedoch nicht nur 1-zu-n Beziehungen anlegen.
 Durch Erweiterung der 
\emph on
relationship
\emph default
-Methode mit dem 
\emph on
uselist
\emph default
 Parameter auf folgende Weise lässt sich an beiden Seiten des relationships
 eine Einzelinstanz hinterlegen.
\end_layout

\begin_layout LyX-Code
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Beispielprogramme/1-zu-1.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beispiel einer 1-zu-1 Beziehung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementierung
\end_layout

\begin_layout Subsection
Automatisches Abmelden
\end_layout

\begin_layout Standard
Bei einem zenralen System, das mehreren Nutzern zugänglich ist, ist es wünschens
wert wenn ein Nutzer automatisch abgemeldet wird sobald er eine bestimmte
 Zeit untätig ist.
 Dies beugt Missbrauch vor.
 Hierzu wurde die Klasse 
\emph on
Timeout
\emph default
 geschrieben.
\end_layout

\begin_layout Standard

\emph on
Timeout
\emph default
 ermöglicht es einen Thread zu öffnen, welcher im Hintergrund mit einer
 bestimmten Abtastrate prüft ob die eingestellte Zeit bereits verstrichen
 ist.
 Da es mit dieser Funktionalität an sich nur ein Timer wäre, implementiert
 die Klasse weiterhin die Methode 
\emph on
reset
\emph default
 um den internen Timer immer dann zurückzusetzen, wenn ein bestimmtes Event
 aufgetreten ist.
 Jede 
\emph on
Timeout
\emph default
-Instanz erhält außerdem ein aufrufbares Objekt und eine Liste mit positionellen
 Argumenten.
 Beim timeout wird diese Methode mit den übergebenen Argumenten ausgeführt
 und das Attribut 
\emph on
timed_out
\emph default
 auf 
\emph on
True
\emph default
 gesetzt.
\end_layout

\begin_layout Standard
Da die Klasse Timeout auf paralleler Programmierung basiert sind hier einige
 Besonderheiten zu beachten.
 So wird auf 
\emph on
timer
\emph default
 sowohl von außerhalb, über 
\emph on
reset
\emph default
, wie auch von innerhalb zugegriffen.
 Die Punkte an denen diese Zugriffe stattfinden bezeichnet man als 
\emph on
Critical Sections
\emph default
, hier kann es zu sog.
 
\emph on
Race Conditions
\emph default
 kommen
\begin_inset CommandInset citation
LatexCommand cite
key "Python3"
literal "true"

\end_inset

.
 Dies ist der Fall wenn ein Thread gerade auf die Variable zugreift(z.B.
 liest) und dann der andere Thread die Kontrolle erhält und die Variable
 überschreibt und führt dazu dass der lesende Thread einen falschen Wert
 erhält.
 Um dieses Problem vorzubeugen existiert die Klasse 
\emph on
Lock
\emph default
 des Moduls 
\emph on
threading.

\emph default
 Mithilfe dieser lassen sich Stellen, die nicht Parallel verarbeitet werden
 dürfen, abriegeln (vgl.
 Mutex).
 Dabei nimmt sich der Thread, welcher zuerst seine 
\emph on
Critical Section
\emph default
 erreicht den 
\emph on
lock
\emph default
, welcher als Kontextmanager fungiert(intern werden die Methoden lock.acquire
 und lock.release aufgerufen) und führt den Code im 
\emph on
with
\emph default
-Block aus.
 Der andere Thread kann hierbei weiterlaufen bis er seine 
\emph on
Critical Section
\emph default
 erreicht, erst dann wird er blockiert bis er selbst den 
\emph on
lock acquire
\emph default
'n kann.
 
\end_layout

\begin_layout Standard
Zur Parallelisierung wurde ein Thread einem Prozess gegenüber bevorzugt
 da der Overhead hier kleiner ist, es ist also weniger kostspielig einen
 neuen Thread zu öffnen.
 Außerdem ist der Datenaustausch zwischen Threads immens einfacher verglichen
 mit Prozessen, in unserem Fall können wir einfach ein Attribut der Klasse
 dafür benutzen.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
PyQt5
\end_layout

\begin_layout Subsection
Darstellen der Verantwortlichkeiten als Baumstruktur
\end_layout

\begin_layout Standard
Aufgrund von guter Übersichtlichkeit haben wir uns dazu entschieden die
 Verantwortlichkeiten als Baumstruktur darzustellen.
 PyQt5 stellt hierzu die Widgets QTreeView und QTreeWidget zur Verfügung,
 wobei QTreeView ein Model-View-Architektur- und QTreeWidget ein Item-basierende
s Widget ist.
 Die MV-Architektur die PyQt über einige, teils abstrakte, Klassen bietet,
 ist dabei eine Variante der generell bekannten Model-View-Controller-Architektu
r wobei der Controller mit dem View kombiniert wurde.
 Desweiteren wurde in PyQt der Delegate hinzugefügt, der managed, wie Daten
 im View gerendert werden und wie geänderte Daten der UI im Model abgelegt
 werden.
\end_layout

\begin_layout Standard
Da im Fall von TUInventory nicht gewünscht ist, dass Daten direkt im Baum
 geändert werden können und die Darstellung der Daten nur an dieser Stelle
 erfolgt musste aufgrund von Kosten-Nutzen Aspekten vorerst die Item-basierte
 Variante des 
\emph on
QTreeWidget
\emph default
 vorgezogen werden.
 Das befüllen dieses Widgets erfolgt in der Methode 
\emph on
set_tree
\emph default
 der Klasse 
\emph on
MainDialog
\emph default
.
\end_layout

\begin_layout Standard
Zu Beginn wird hier über den bereits erläuterten Session-Context-Manager
 eine neue Datenbank-Session geöffnet in der wir nun alle 
\emph on
Responsibilit
\emph default
ies abfragen können.
 Über diese wird nun iteriert, wobei in jeder Iteration für Ort, Benutzer
 und Gerät jeweils zuerst ein 
\emph on
QTreeWidgetItem
\emph default
 erzeugt wird.
 Dieses wird zum Einfügen in den Baum benötigt.
 Nun wird nach einem Siebprinzip nacheinander ermittelt ob sich der Ort,
 Benutzer und das Gerät bereits im Baum befinden.
 Hierbei wird zuerst überprüft ob sich im Wurzelverzeichnis 
\emph on
root
\emph default
 des Baums die 
\emph on
Location
\emph default
 der aktuellen 
\emph on
Responsibility
\emph default
 befindet, sofern dies nicht der Fall ist wird die Location mit all ihren
 untergeordneten Elementen eingefügt.
 Falls die 
\emph on
Location
\emph default
 bereits als sog.
 
\emph on
TopLevelItem
\emph default
 im Baum befindet wird überprüft ob unter dieser 
\emph on
Location
\emph default
 bereits der 
\emph on
User
\emph default
 der aktuellen 
\emph on
Responsibility
\emph default
 befindet, sofern dies nicht der Fall ist wird der 
\emph on
User
\emph default
 unter seiner 
\emph on
Location
\emph default
 einsortiert und bekommt das aktuelle 
\emph on
Device
\emph default
 als Unterelement zugewiesen.
 Sollte der 
\emph on
User
\emph default
 bereits vorhanden sein, wird analog zur 
\emph on
Location
\emph default
 weiterverfahren.
 Dieser Prozess ist im folgenden Struktogramm dargestellt:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Bilder/Responsibility-Baum-Sieb-Struktorgramm.png
	scale 75

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Struktogramm nach Nassi-Shneiderman zum Responsibility-Baum-Sieb 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In diesem Teil des Programms, werden oftmals Generator-Expressions und List-Comp
rehensions verwendet, daher sei im Folgenden kurz erläutert wann sich für
 welche entschieden wurde.
\end_layout

\begin_layout Standard
Der folgende Programmausschnitt zeigt einen Ausschnitt der interaktiven
 Konsole.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "Beispielprogramme/Generator-Expression_vs_List-Comprehension.py"
lstparams "language=Python"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Vergleich von Generator-Expressions und List-Comprehensions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zu Beginn wird hier die Funktion 
\emph on
getsizeof
\emph default
 der Standartlibrary 
\emph on
sys
\emph default
 importiert, die es erlaubt die Größe einer Instanz in Bytes zu ermitteln.
 Nun wird zunächst über eine List-Comprehension eine Liste mit den Zahlen
 0 bis 9 definiert.
 Anschließend werden die selben Zahlen mit einer Generator-Expression hinterlegt.
 
\end_layout

\begin_layout Standard
Vergleicht man hier die Größe der beiden Instanzen wird klar, dass die Generator
-Expression wesentlich kleiner ist.
 Führt man nun einen Typvergleich der Instanzen durch sieht man, dass es
 sich bei 
\emph on
a
\emph default
 um eine Liste und bei 
\emph on
b
\emph default
 um einen Generator handelt.
 Damit lässt sich auch einfach der geringere Speicher-Footprint erklären:
 bei einer List-Comprehension erfolgt die Auswertung sofort und somit liegt
 die ganze Liste im Speicher.
 Bei der Generator-Expression hingegen, wird erst zum Zeitpunkt der Auswertung
 die Methode 
\emph on
__next__
\emph default
 der zugrundeliegenden Generatorinstanz aufgerufen, welche dann intern mittels
 
\emph on
yield
\emph default
 den nächsten Wert ausgibt.
\end_layout

\begin_layout Standard
Jedoch kann man dennoch nicht immer Generatoren einsetzen, da diese einige
 entscheidenden Nachteile haben.
 So ist es nicht möglich, mittels Index auf die Elemente eines Generators
 zuzugreifen.
 Außerdem ist ein Generator nach einer 
\begin_inset Quotes eld
\end_inset

Benutzung
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

aufgebraucht
\begin_inset Quotes erd
\end_inset

.
 Dies kann man sehen, wenn man zweimal die Summen unserer beiden Instanzen
 addiert.
 Für die List-Comprehension wird hier korrekterweise 90 ausgegeben (
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
sum_{n=0}^{9} n = 45$
\end_layout

\end_inset

), für die Generator-Expression jedoch nur 45, da sie beim zweiten Aufruf
 0 zurückgibt.
 Hierzu sollte noch gesagt werden, dass wenn man einen Generator nicht über
 eine Generator-Expression, sondern manuell als Klasse/Funktion implementiert
 dies teilweise umgangen werden kann.
\end_layout

\begin_layout Standard
Mit diesem Wissen ist nun auch leicht erklärbar wann welche der Strukturen
 eingesetzt wurde:
\end_layout

\begin_layout Itemize
Generator-Expression immer wenn sichergestellt ist, dass die Instanz nur
 einmal iteriert werden muss
\end_layout

\begin_layout Itemize
List-Comprehension immer dann, wenn die Instanz mehrfach iteriert, oder
 
\begin_inset Quotes eld
\end_inset

abonniert
\begin_inset Quotes erd
\end_inset

(von engl.
 subscribe - also die [Index]-Notation) werden muss
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "Literaturverzeichnis"
options "alphadin"

\end_inset


\end_layout

\end_body
\end_document
